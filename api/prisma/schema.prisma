// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  SUPER_ADMIN
  ORG_ADMIN
}

enum UserRole {
  HR
  MANAGER
  EMPLOYEE
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
  PERSONAL
}

enum ApproverRole {
  MANAGER
  HR
}

// Add AttendanceStatus enum and Attendance model for attendance tracking
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model Organization {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String               @unique
  description String?
  admins      Admin[]
  users       User[]
  departments Department[]
  settings    OrganizationSettings?
  leaveRequests LeaveRequest[]
  attendances    Attendance[]
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model OrganizationSettings {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique @db.ObjectId
  general        Json         @default("{}")
  email          Json         @default("{}")
  security       Json         @default("{}")
  leaveApproval  Json         @default("{}")
  notifications  Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}


model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  name      String
  role      AdminRole
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?    @db.ObjectId
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  password      String
  name          String
  role          UserRole
  isActive      Boolean     @default(true)
  lastLogin     DateTime?
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId  String?     @db.ObjectId
  managedDepartments Department[] @relation("DepartmentHead")
  teamsManaged  Team[]      @relation("UserTeamsManaged")
  team          Team?       @relation("TeamMembers", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId        String?     @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String     @db.ObjectId
  leaveRequests LeaveRequest[]
  leaveApprovals LeaveApproval[]
  attendanceRecords Attendance[] @relation("AttendanceUser")
  recordedAttendances Attendance[] @relation("AttendanceRecorder")

  hrAssigned     User?       @relation("UserHR", fields: [hrAssignedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hrAssignedId   String?     @db.ObjectId
  employeesUnderHR User[]    @relation("UserHR")

  managerAssigned     User?       @relation("UserManager", fields: [managerAssignedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  managerAssignedId   String?     @db.ObjectId
  employeesUnderManager User[]    @relation("UserManager")

  @@index([name])
  @@index([departmentId])
  @@index([teamId])
  @@index([organizationId])
  @@index([hrAssignedId])
  @@index([managerAssignedId])
}

model Department {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String
  description   String?
  head          User?        @relation("DepartmentHead", fields: [headId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  headId        String?      @db.ObjectId
  parentDepartment Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String?      @db.ObjectId
  subDepartments Department[] @relation("DepartmentHierarchy")
  members       User[]
  teams         Team[]       // Teams under this department
  isActive      Boolean      @default(true)
  location      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?      @db.ObjectId
  @@unique([name, parentId, organizationId])
  @@unique([code, organizationId])
  @@index([headId])
  @@index([parentId])
}

/// Team model representing a team under a department
model Team {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  department    Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId  String     @db.ObjectId
  manager       User?      @relation("UserTeamsManaged", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  managerId     String?    @db.ObjectId
  members       User[]     @relation("TeamMembers")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveApproval {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  leaveRequest   LeaveRequest  @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  leaveRequestId String        @db.ObjectId

  approver       User?         @relation(fields: [approverId], references: [id], onDelete: SetNull)
  approverId     String?       @db.ObjectId

  role           ApproverRole  // now an enum of allowed roles
  status         ApprovalStatus @default(PENDING)
  comments       String?
  approvedAt     DateTime?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([approverId])
}

model LeaveRequest {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.ObjectId

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId

  leaveType      LeaveType
  startDate      DateTime
  endDate        DateTime
  totalDays      Int
  reason         String?

  status         LeaveStatus  @default(PENDING)
  approvals      LeaveApproval[]

  comments       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([startDate, endDate])
  @@index([organizationId])
  @@index([userId])
}

model Attendance {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation("AttendanceUser", fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.ObjectId
  status         AttendanceStatus
  date           DateTime
  recordedBy     User?        @relation("AttendanceRecorder", fields: [recordedById], references: [id], onDelete: SetNull)
  recordedById   String?      @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, date])
  @@index([organizationId])
  @@index([date])
}